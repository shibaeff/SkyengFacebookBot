from unittest import TestCase
from unittest import main as umain
from Keyboard import Keyboard
from utils import wit_response




def send_message(sender_id, keyboard):
    print("$$ Sending to %s" % sender_id)
    print("%s ::::\n %s" % (keyboard.get_text(), str([item['title'] for item in keyboard.get_buttons()])))


def save_user_email():
    pass


def get_days():
    return ["20/02", "21/02"]


def check_for_existance():
    return True


def write_day(day):
    pass


def get_time():
    return ["14:00", "17:00"]


def write_time():
    pass

STATES = dict()
ENLISTING = set()


class TestWebhook(TestCase):
    def enlisting(self, sender_id, pipeline, states):
        for messaging_text, assert_state in zip(pipeline, states):
            current_state = STATES[sender_id]
            entity, value = wit_response(messaging_text)

            self.assertEquals(current_state, assert_state)
            if current_state == "wait_time":
                write_time()
                send_message(sender_id,
                             Keyboard(
                                 text="üéâ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã. –í–£ –ø—Ä–æ–π–¥–µ—Ç {{intro_lesson_date}} –≤ {{intro_lesson_time}}. –î–æ –≤—Å—Ç—Ä–µ—á–∏!"
                                      "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –æ—Ç–º–µ–Ω–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –º–æ–∂–Ω–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.",
                                 titles=None
                             ))
                send_message(sender_id,
                             Keyboard(
                                 text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å?",
                                 titles=["–î–∞", "–ù–µ—Ç"]
                             ))
                STATES[sender_id] = 'calendar_wait'

            elif current_state == "wait_days":
                write_day(messaging_text)
                send_message(sender_id,
                             Keyboard(
                                 text="üëçGreat! –ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è",
                                 titles=get_time()
                             ))
                STATES[sender_id] = "wait_time"

            elif current_state == 'enlisting_start':
                send_message(sender_id, Keyboard(
                    text="–ü—Ä–∏–≤–µ—Ç üëã –Ø –∑–∞–ø–∏—à—É –≤–∞—Å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫ –≤ –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—É –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ Skyeng."
                         "–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–∫–∫–∞—É–Ω—Ç. –û–Ω –Ω—É–∂–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ –∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –≥–¥–µ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —É—Ä–æ–∫. –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç ‚Äî —è –µ–≥–æ —Å–æ–∑–¥–∞–º."
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email.",
                    titles=None
                ))
                STATES[sender_id] = 'wait_email'
            elif current_state == 'wait_email':
                save_user_email()
                send_message(sender_id,
                             Keyboard(
                                 text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —É—á–µ–Ω–∏–∫–∞",
                                 titles=["–î–æ 18", "18+"]
                             ))
                STATES[sender_id] = 'wait_age'
            elif current_state == 'wait_age':
                if value == 'positive':
                    if check_for_existance():
                        send_message(sender_id,
                                     Keyboard(
                                         text="–£—Ä–∞! –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç :)"
                                              "–ï—Å–ª–∏ –≤—ã –∑–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å, –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ —Å—Å—ã–ª–∫–µ {{password_reset_link}}"
                                              "–ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —á—Ç–µ–Ω–∏—è —Å —ç–∫—Ä–∞–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ Ctrl+Alt+Z. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–ª–∞–≤–∏—à –Ω–∞–∂–º–∏—Ç–µ Ctrl+–∫–æ—Å–∞—è —á–µ—Ä—Ç–∞.",
                                         titles=None
                                     ))
                    else:
                        send_message(sender_id,
                                     Keyboard(
                                         text="üí´ Done! –Ø —Å–æ–∑–¥–∞–ª –≤–∞–º –∞–∫–∫–∞—É–Ω—Ç –≤ Skyeng. "
                                              "–õ–æ–≥–∏–Ω: {{customer.email}}, –ø–∞—Ä–æ–ª—å –æ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø—Ä–∏–¥–µ—Ç –≤–∞–º –Ω–∞ –ø–æ—á—Ç—É.",
                                         titles=None
                                     ))
                else:
                    pass
                days = get_days()
                send_message(sender_id, Keyboard(
                    text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è üóìÔ∏è",
                    titles=days
                ))
                STATES[sender_id] = "wait_days"

    def webhook(self, pipeline, states_line):
        # log(data)

        sender_id = 13

        for (messaging_text, assert_state) in zip(pipeline, states_line):
            if sender_id in ENLISTING:
                self.enlisting(sender_id, messaging_text)
            entity, value = wit_response(messaging_text)
            current_state = STATES.get(sender_id, 'initial')
            # self.assertEquals(current_state, assert_state)
            if current_state == "info_wait":
                if value == "somethingelse":
                    # TODO optimize this button
                    send_message(sender_id, Keyboard(
                        text="Skyeng Magazine ‚Äî –æ–Ω–ª–∞–π–Ω-–∂—É—Ä–Ω–∞–ª –æ —Ç–æ–º, –∫–∞–∫ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –±–æ—è—Ç—å—Å—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ, —É–∑–Ω–∞—Ç—å –µ–≥–æ –ø–æ–ª—É—á—à–µ –∏ –ø–æ–ª—é–±–∏—Ç—å. –ß–∏—Ç–∞—Ç—å: https://magazine.skyeng.ru/"
                             "YouTube-–∫–∞–Ω–∞–ª ‚Äî –Ω–µ—Å–∫—É—á–Ω—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Å –¢–∞–Ω–µ–π –°—Ç–∞—Ä–∏–∫–æ–≤–æ–π –∏ –∞–º–µ—Ä–∏–∫–∞–Ω—Ü–µ–º –î—ç–Ω–∏–µ–ª–æ–º. –°–º–æ—Ç—Ä–µ—Ç—å: https://www.youtube.com/user/skyengschool"
                             "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Skyeng ‚Äî —É—á–∏—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞. –ï–¥–∏–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤–∞—à–∏—Ö —É—Ä–æ–∫–æ–≤, —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–±–æ—Ä–æ–≤, —Ñ–∏–ª—å–º–æ–≤ –∏ –ø–µ—Å–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: {{app_download_link}}"
                             "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–π—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Skyeng —Å–ª–æ–≤–∞ —Å —Å–∞–π—Ç–æ–≤ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: {{extension_download_link}}"
                             "'–ü–æ–ª–µ–∑–Ω—ã–µ' –ø–∏—Å—å–º–∞ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ email-–∫—É—Ä—Å—ã –ø—Ä–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫. –í—ã–±—Ä–∞—Ç—å: https://school.skyeng.ru/mailing"
                             "–í–µ–±–∏–Ω–∞—Ä—ã ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–Ω–ª–∞–π–Ω-–ª–µ–∫—Ü–∏–∏. –ê—Ñ–∏—à–∞: http://webinar.skyeng.ru/afisha"
                    ))
                    app.logger.info("something else")
                    STATES[sender] = "continue"
                    send_message(sender_id, Keyboard(titles=["–î–∞", "–ù–µ—Ç"],
                                                     text="–ü—Ä–æ–¥–æ–ª–∂–∏–º?"))
                elif value == "feedback":
                    send_message(sender_id, Keyboard(
                        text="Skyeng - —Ç–æ–ø! –û—Ç–≤–µ—á–∞—é",
                        titles=[]
                    ))
                    STATES[sender_id] = "continue"
                    app.logger.info("FEEDBACKS!!")
                    send_message(sender_id, Keyboard(titles=["–î–∞", "–ù–µ—Ç"],
                                                     text="–ü—Ä–æ–¥–æ–ª–∂–∏–º?"))
                elif value == "numbers":
                    STATES[sender_id] = "continue"
                    send_message(sender_id, Keyboard(titles=None,
                                                     text="Skyeng ‚Äî —ç—Ç–æ –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è. –í —à–∫–æ–ª–µ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã, –ø–æ–º–æ–≥–∞—é—â–∏–µ –∂–∏—Ç–µ–ª—è–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ–≥–∞–ø–æ–ª–∏—Å–æ–≤ –≤—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –≤ —É—Å–ª–æ–≤–∏—è—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏."
                                                          "\n5460 –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π\n58700 —É—á–µ–Ω–∏–∫–æ–≤\n4218000 —É—Ä–æ–∫–æ–≤ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏—è\n"
                                                          "50 –º–∏–Ω—É—Ç ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞\n24 —á–∞—Å–∞ –≤ —Å—É—Ç–∫–∏ ‚Äî –∏–¥—É—Ç –∑–∞–Ω—è—Ç–∏—è –≤ —à–∫–æ–ª–µ\n1-–π —É—Ä–æ–∫ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º Skyeng —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ 1 –∏–∑ 36 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"))
                    send_message(sender_id, Keyboard(titles=["–î–∞", "–ù–µ—Ç"],
                                                     text="–ü—Ä–æ–¥–æ–ª–∂–∏–º?"))
                elif value == "how":
                    STATES[sender_id] = "continue"
                    send_message(sender_id,
                                 Keyboard(
                                     titles=None,
                                     text="–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç —É—Ä–æ–∫–∏ –≤ Skyeng ‚Äî https://magazine.skyeng.ru/vimbox/\n"
                                          "–ü—Ä–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Skyeng ‚Äî https://magazine.skyeng.ru/skyeng-app/"

                                 ))
                    send_message(sender_id, Keyboard(titles=["–î–∞", "–ù–µ—Ç"],
                                                     text="–ü—Ä–æ–¥–æ–ª–∂–∏–º?"))
            elif current_state == "thank_you_wait":
                # TODO enlisting routine
                if value == 'negative':
                    send_message(sender_id,
                                 Keyboard(titles=None,
                                          text="–ü–æ–∫–∞!!!")
                                 )
                    STATES[sender_id] = 'initial'
                elif value == 'positive':

                    STATES[sender_id] = 'enlisting_start'
                    ENLISTING.add(sender_id)
                    self.enlisting(sender_id, messaging_text)
            elif current_state == "continue":
                if value == 'negative':
                    send_message(sender_id, Keyboard(
                        text="–ü—Ä–∏—è—Ç–Ω–æ –±—ã–ª–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è ü§ó\n"
                             "–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ?\n"
                             "–ó–∞–Ω—è—Ç–∏–µ –¥–ª–∏—Ç—Å—è 50 –º–∏–Ω—É—Ç –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ–Ω–ª–∞–π–Ω. –ù–∞ –Ω–µ–º:\n"
                             "‚úîÔ∏è–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º –≤–∞—à–∏ —Ü–µ–ª–∏\n"
                             "‚úîÔ∏è–û–ø—Ä–µ–¥–µ–ª–∏–º —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ\n"
                             "‚úîÔ∏è–†–∞—Å—Å–∫–∞–∂–µ–º –ø—Ä–æ —É—á–µ–±–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É\n",
                        titles=['–î–∞', "–ù–µ—Ç"]
                    ))
                    STATES[sender_id] = "thank_you_wait"
                elif value == 'positive':
                    send_message(sender_id, Keyboard(
                        text="–ß—Ç–æ –≤–∞–º –±—ã–ª–æ –±—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å?",
                        titles=[
                            "Skyeng –≤ —Ü–∏—Ñ—Ä–∞—Ö",
                            "–û—Ç–∑—ã–≤—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤",
                            # "–ß—Ç–æ –µ—Å—Ç—å –∫—Ä–æ–º–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ?", TODO optimize
                            "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?"
                        ]
                    ))
                    STATES[sender_id] = "info_wait"
            elif current_state == 'initial_wait':
                if value == 'positive' or value == 'neutral':
                    send_message(sender_id, Keyboard(
                        text="–ß—Ç–æ –≤–∞–º –±—ã–ª–æ –±—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å?",
                        titles=[
                            "Skyeng –≤ —Ü–∏—Ñ—Ä–∞—Ö",
                            "–û—Ç–∑—ã–≤—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤",
                            # "–ß—Ç–æ –µ—Å—Ç—å –∫—Ä–æ–º–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ?", TODO optimize
                            "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?"
                        ]
                    ))
                    STATES[sender_id] = "info_wait"
                if value == 'negative':
                    send_message(sender_id, Keyboard(
                        text="–û–∫–µ–π ü§ê",
                        titles=["–ü–µ—Ä–µ–¥—É–º–∞–ª–∏?"]
                    ))
                if value == 'once_again':
                    STATES['sender_id'] = 'initial_wait'
                    send_message(sender_id, Keyboard(titles=['–î–∞', '–ù–µ—Ç', '–ù–µ –∑–Ω–∞—é'],
                                                     text='–ü—Ä–∏–≤–µ—Ç üëã –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤–∞–º –Ω–µ–º–Ω–æ–≥–æ –æ Skyeng?'))
            elif value == "greeting" or current_state == 'initial':
                send_message(sender_id, Keyboard(titles=['–î–∞', '–ù–µ—Ç', '–ù–µ –∑–Ω–∞—é'],
                                                 text='–ü—Ä–∏–≤–µ—Ç üëã –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤–∞–º –Ω–µ–º–Ω–æ–≥–æ –æ Skyeng?'))
                STATES[sender_id] = 'initial_wait'

    # def test_simple_greeting(self):
    #     pipeline = ["–ü—Ä–∏–≤–µ—Ç", '–î–∞', '–ù–µ—Ç']
    #     states_line = ["initial", 'initial_wait', 'continuation_wait']
    #     self.webhook_mock(pipeline, states_line)

    # def test_simple_back_to_greeting(self):
    #     pipeline = ["–ü—Ä–∏–≤–µ—Ç", '–ù–µ—Ç', '–ü–µ—Ä–µ–¥—É–º–∞–ª–∏?']
    #     states_line = ["initial", 'initial_wait', 'initial_wait']
    #     self.webhook_mock(pipeline, states_line)

    # def test_simple_without_info(self):
    #     pipeline = ["–ü—Ä–∏–≤–µ—Ç", '–ù–µ—Ç', '–ü–µ—Ä–µ–¥—É–º–∞–ª–∏?']
    #     states_line = ["initial", 'initial_wait', 'initial_wait']
    #     self.webhook(pipeline, states_line)
    # def test_proceed_to_age_selection(self):
    #     pipeline = ["–ü—Ä–∏–≤–µ—Ç", "–î–∞", "Skyeng –≤ —Ü–∏—Ñ—Ä–∞—Ö", "–ù–µ—Ç", "–î–∞", "–î–æ 18"]
    #     states_line = ["initial", "intial_wait", "info_wait", "continue", "thankyou_wait", "wait_age"]

    def test_enlisting(self):
        ENLISTING.add(13)
        STATES[13] = "enlisting_start"
        self.enlisting(pipeline=[], states=[])
if __name__ == "__main__":
    umain()



